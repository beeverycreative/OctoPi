#!/usr/bin/env bash
set -x
set -e
# BEEwebPI generation script
# Helper script that runs in a Raspbian chroot to create the BEEwebPI distro
# Written by Guy Sheffer <guysoft at gmail dot com>
# GPL V3

export LC_ALL=C

source /common.sh

if [ -n "$BEEWEBPI_APT_PROXY" ]
then
  echo "Acquire::http { Proxy \"http://$BEEWEBPI_APT_PROXY\"; };" > /etc/apt/apt.conf.d/02octopi_build_proxy
fi

if [ -n "$BEEWEBPI_PYPI_INDEX" ]
then
  pip_index_config="[global]\nindex-url = $BEEWEBPI_PYPI_INDEX"
  easyinstall_index_config="[easy_install]\nindex-url = $BEEWEBPI_PYPI_INDEX"

  mkdir -p /root/.pip
  echo -e "$pip_index_config" > /root/.pip/pip.conf
  echo -e "$easyinstall_index_config" > /root/.pydistutils.cfg

  mkdir -p /home/pi/.pip
  sudo -u pi echo -e "$pip_index_config" > /home/pi/.pip/pip.conf
  sudo -u pi echo -e "$easyinstall_index_config" > /home/pi/.pydistutils.cfg

  echo "Configured pypi index url $BEEWEBPI_PYPI_INDEX"
  cat /home/pi/.pip/pip.conf
  cat /home/pi/.pydistutils.cfg
fi

# prevent any installed services from automatically starting (I'm looking at you haproxy)
echo exit 101 > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
apt-get update

# in case we are building from a regular raspbian image instead of the lite one...
remove_extra=""
if [ $( is_installed greenfoot ) -eq 1 ];
then
  remove_extra="$remove_extra greenfoot nodered"
fi
apt-get remove -y --purge scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats $remove_extra
apt-get autoremove -y

apt-get -y --force-yes install python2.7 python-virtualenv python-dev git screen libts-bin subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1 libffi-dev libssl-dev

echo " - Reinstall iputils-ping"
apt-get install --reinstall iputils-ping


pushd /home/pi

  #build virtualenv
  sudo -u pi virtualenv oprint

  # first lets upgrade pip (the shipped version is way too old...)
  sudo -u pi /home/pi/oprint/bin/pip install --upgrade "pip>=8,<9"

  # we also want pyopenssl so we have a secure SSL context available
  # since that stuff takes ages to compile during build, we do a somewhat dirty
  # trick here by installing the raspbian versions, copying the libs over
  # to our virtualenv and then purging the raspbian versions again
  apt-get -y --force-yes install python-openssl
  if [ $( is_in_apt python-cryptography ) -eq 1 ]; then
    apt-get -y --force-yes install python-cryptography
    from=/usr/lib/python2.7/dist-packages
    to=/home/pi/oprint/lib/python2.7/site-packages
    for pattern in "cffi*" "cryptography*" "OpenSSL*" "ply*" "pycparser*" "pyOpenSSL*" "six*"
    do
      cp -v -r --preserve=mode,timestamps $from/$pattern $to/
    done
    apt-get remove -y --purge python-openssl python-cryptography
  else
    sudo -u pi /home/pi/oprint/bin/pip install cryptography
    apt-get remove -y --purge python-openssl
  fi
  apt-get autoremove -y
  chown -R pi:pi /home/pi/oprint
  sudo -u pi /home/pi/oprint/bin/pip install ndg-httpsclient pyasn1

  # BEEweb
  if [ "$BEEWEBPI_INCLUDE_BEEWEB" == "yes" ]
  then
    echo "--- Installing BEEweb"

    #pybonjour (for mdns discovery)
    sudo -u pi /home/pi/oprint/bin/pip install https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/pybonjour/pybonjour-1.1.1.tar.gz

    #BEEweb
    chown -R pi:pi BEEweb
    pushd BEEweb
      PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/python setup.py install
    popd
  fi

  # BEEPANEL
  if [ "$BEEWEBPI_INCLUDE_BEEPANEL" == "yes" ]
  then
    echo "--- Installing BEEPANEL"
    
    # install kivy dependencies
    #apt-get install -y  libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
    #                    pkg-config libgl1-mesa-dev libgles2-mesa-dev \
    #                    python-setuptools libgstreamer1.0-dev git-core \
    #                    gstreamer1.0-plugins-{bad,base,good,ugly} \
    #                    gstreamer1.0-{omx,alsa} python-dev cython \
    #                    python-pip python-netifaces libmtdev1
    apt-get install -y  python-setuptools python-pip python-netifaces \
                        libmtdev1 cython python-pygame
    pip install --upgrade pip
    pip install --upgrade virtualenv
    pip install python-wifi
    pip install pyyaml
    pip install logentries
    pip install wifi

    #patch kivy, to fix inverted coordinates in screen, and install it
    mv /home/pi/hidinput.patch /home/pi/kivy
    pushd /home/pi/kivy
       patch -Np1 -i hidinput.patch
       make
       echo "export PYTHONPATH=$(pwd):\$PYTHONPATH" >> /home/pi/.profile
    popd
    pip install /home/pi/kivy

    #Add fbcp for TFT screens
    chown -R pi:pi rpi-fbcp
    pushd rpi-fbcp
        sudo -u pi mkdir build
        pushd build
            sudo -u pi cmake ..
            sudo -u pi make
            install fbcp /usr/local/bin/fbcp
            sudo -u pi make clean
        popd
    popd
  fi

  # BEEWEBPI (for BEEweb settings update)
  if [ "$BEEWEBPI_INCLUDE_BEEWEBPI" == "yes" ]
  then
    echo "--- Installing BEEWEBPI (self)"
    chown -R pi:pi beewebpi-repo
  fi

  #mjpg-streamer
  if [ "$BEEWEBPI_INCLUDE_MJPGSTREAMER" == "yes" ]
  then
    echo "--- Installing mjpg-streamer"
    apt-get -y --force-yes --no-install-recommends install libjpeg8-dev imagemagick libav-tools libv4l-dev
    chown -R pi:pi mjpg-streamer
    pushd mjpg-streamer
      mv mjpg-streamer-experimental/* .
      sudo -u pi make
    popd
  fi
  
  #CuraEngine
  if [ "$BEEWEBPI_INCLUDE_CURAENGINE" == "yes" ]
  then
    echo "--- Installing CuraEngine"
    folder=CuraEngine-$BEEWEBPI_CURAENGINE_VERSION
    zipfile=$folder.zip
    apt-get -y install gcc-4.9 g++-4.9
    sudo -u pi wget -O$zipfile $BEEWEBPI_CURAENGINE_ARCHIVE
    sudo -u pi unzip $zipfile
    pushd $folder
      sudo -u pi make CXX=g++-4.9 VERSION=$BEEWEBPI_CURAENGINE_VERSION
      cp build/CuraEngine /usr/local/bin/cura_engine
    popd
    sudo -u pi rm -r $folder $zipfile
  fi

  #setup haproxy for http and https, and webcam
  if [ "$BEEWEBPI_INCLUDE_HAPROXY" == "yes" ]
  then
    echo "--- Installing haproxy"
    apt-get -y --force-yes install ssl-cert haproxy
    rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
  fi

  if [ "$BEEWEBPI_INCLUDE_WIRINGPI" == "yes" ]
  then
    echo "--- Installing WiringPi"
    apt-get install wiringpi
  fi
  
popd

#Make sure user pi has access to serial ports
usermod -a -G tty pi
usermod -a -G dialout pi

# store beewebpi commit used to build this image
echo "$BEEWEBPI_COMMIT" > /etc/beewebpi_commit
echo "$BEEWEBPI_BUILDBASE" > /etc/beewebp_buildbase

# allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/beeweb-shutdown
echo "pi ALL=NOPASSWD: /sbin/service" > /etc/sudoers.d/beeweb-service

#reach printer by name
echo "$BEEWEBPI_OVERRIDE_HOSTNAME" > /etc/hostname
sed -i -e "s@raspberrypi@$BEEWEBPI_OVERRIDE_HOSTNAME@g" /etc/hosts

#make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
#default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# enable raspicam
echo "# enable raspicam" >> /boot/config.txt
echo "start_x=1" >> /boot/config.txt
echo "gpu_mem=128" >> /boot/config.txt
echo "" >> /boot/config.txt

# enable display
echo "# enable display" >> /boot/config.txt
echo "dtoverlay=piscreen,speed=16000000,rotate=90" >> /boot/config.txt

# allow network configuration via /boot/beewebpi-network.txt
sed -i "s@iface wlan0 @iface wlan0-raspbian @g" /etc/network/interfaces
sed -i "s@iface wlan1 @iface wlan1-raspbian @g" /etc/network/interfaces
echo "mapping wlan0" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "mapping wlan1" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "source /boot/beewebpi-network.txt" >> /etc/network/interfaces

# copy /etc/wpa_supplicant/ifupdown.sh to /etc/ifplugd/action.d/ifupdown - for wlan auto reconnect
[ -f /etc/ifplugd/action.d/ifupdown ] && mv /etc/ifplugd/action.d/ifupdown /etc/ifplugd/action.d/ifupdown.original
[ -f /etc/wpa_supplicant/ifupdown.sh ] && ln -s /etc/wpa_supplicant/ifupdown.sh /etc/ifplugd/action.d/ifupdown

#unpack root in the end, so etc file are not overwritten, might need to add two roots int he future
unpack /filesystem/root /

#####################################################################
### setup services

### Disable GUI at start
systemctl set-default multi-user.target
ln -fs /etc/systemd/system/autologin@.service /etc/systemd/system/getty.target.wants/getty@tty1.service

### Expand filesystem at first boot
update-rc.d prepare_resize defaults

### BEEweb

if [ "$BEEWEBPI_INCLUDE_BEEWEB" == "yes" ]
then
  update-rc.d beeweb defaults 95
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/beeweb
  rm /etc/default/beeweb
fi

### haproxy

if [ "$BEEWEBPI_INCLUDE_HAPROXY" == "yes" ]
then
  update-rc.d gencert defaults
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/gencert

  # also we need to make BEEweb bind to all interfaces because otherwise
  # it will be unaccessible...
  [ -f /etc/default/beeweb ] && sed -i "s@HOST=127.0.0.1@HOST=0.0.0.0@" /etc/default/beeweb
fi

### CuraEngine

if [ ! "$BEEWEBPI_INCLUDE_CURAENGINE" == "yes" ]
then
  # unconfigure the cura engine path in beeweb's config.yaml
  sudo -u pi sed -i -e "s@cura_engine: /usr/local/bin/cura_engine@cura_engine:@g" /home/pi/.beeweb/config.yaml
fi

### mjpg_streamer

if [ "$BEEWEBPI_INCLUDE_MJPGSTREAMER" == "yes" ]
then
  # make webcamd autostart
  update-rc.d webcamd defaults
else
  rm /etc/logrotate.d/webcamd
  rm /etc/init.d/webcamd
  rm /etc/default/webcamd
  rm /root/bin/webcamd
fi

# removes the libusb-1.0-0 due to a bug with pyusb: https://github.com/walac/pyusb/issues/57
apt-get remove -y libusb-1.0-0

# installs the necessary extra packages for BeeWeb
apt-get -y install libtool autotools-dev automake bridge-utils iw dnsmasq

# compiles libusb
pushd /home/pi/libusb
	./bootstrap.sh
	./configure --host=arm-linux-gnueabihf --disable-udev
	make
	make install
popd

usermod -a -G root pi

# usbutils for lsusb and vim... just because :)
apt-get install -y usbutils vim

# compiles custom hostapd
apt-get remove -y hostapd
apt-get install -y libnl-dev
pushd /root/
    wget https://w1.fi/releases/hostapd-2.5.tar.gz
    tar -zxvf hostapd-2.5.tar.gz
    pushd hostapd-2.5/
        wget https://raw.githubusercontent.com/pritambaral/hostapd-rtl871xdrv/hostapd_2_5/rtlxdrv.patch
        patch -Np1 -i rtlxdrv.patch
        pushd hostapd/
            cp defconfig .config
            echo CONFIG_DRIVER_RTW=y >> .config
            echo CONFIG_IEEE80211N=y >> .config
            make
            make install
        popd
    popd
popd


update-rc.d networking disable
update-rc.d dhcpcd disable
update-rc.d dnsmasq disable

# replaces the dnsmasq.conf
cp /etc/dnsmasq.conf.dist /etc/dnsmasq.conf

# removes the wpa_supplicant file to signal the AP mode script it can start
rm /etc/wpa_supplicant/wpa_supplicant.conf

# gives the exec permissions to the scripts
chmod +x /home/pi/wifi_ap_mode.sh
chmod +x /home/pi/wifi_client_mode.sh
chmod +x /home/pi/hostname_upd.sh
chmod +x /home/pi/remove_wpa_supplicant_conf.sh
chmod +x /home/pi/webcam.sh
chmod +x /home/pi/webcamDaemon.sh

# creates the necessary init symlinks
update-rc.d wifi_init defaults
update-rc.d kivy_init defaults
update-rc.d eth0_init defaults

#cleanup
apt-get clean
apt-get autoremove -y

rm -r /usr/sbin/policy-rc.d

if [ -n "$BEEWEBPI_APT_PROXY" ]
then
  rm -r /etc/apt/apt.conf.d/02octopi_build_proxy
fi

if [ -n "$BEEWEBPI_PYPI_INDEX" ]
then
  rm -r /root/.pip
  rm -r /root/.pydistutils.cfg
  rm -r /home/pi/.pip/pip.conf
  rm -r /home/pi/.pydistutils.cfg
fi
